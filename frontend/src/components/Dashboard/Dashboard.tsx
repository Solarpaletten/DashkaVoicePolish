// src/components/Dashboard/Dashboard.tsx
import React, { useState, useEffect, useRef } from 'react';
import { currentLanguageConfig } from '../../config/currentLanguage';

interface DashboardProps {}

const Dashboard: React.FC<DashboardProps> = () => {
  // State —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
  const [currentRole, setCurrentRole] = useState<'user' | 'steuerberater'>('user');
  const [currentMode, setCurrentMode] = useState<'text' | 'voice'>('text');
  const [inputText, setInputText] = useState('');
  const [originalText, setOriginalText] = useState('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω...');
  const [translatedText, setTranslatedText] = useState('–ü–µ—Ä–µ–≤–æ–¥ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å...');
  const [isRecording, setIsRecording] = useState(false);
  const [status, setStatus] = useState('üü¢ DashkaBot –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
  const [isTranslating, setIsTranslating] = useState(false);

  // Connection status
  const [connectionStatus, setConnectionStatus] = useState({
    ai: false,
    ws: false,
    speech: false
  });

  // Refs
  const recognitionRef = useRef<any>(null);
  const websocketRef = useRef<WebSocket | null>(null);

  // API Configuration
  const config = {
    aiServer: import.meta.env.VITE_API_URL || "https://api.dashkapolish.swapoil.de",
    wsServer: import.meta.env.VITE_WS_URL || "wss://api.dashkapolish.swapoil.de/ws",
    enableWebSocket: true,
    enableSpeech: true
  };

  // Initialize system
  useEffect(() => {
    initSystem();
    return () => {
      cleanup();
    };
  }, []);

  const initSystem = async () => {
    await checkAIServer();
    initWebSocket();
    initSpeechRecognition();
    setStatus('üü¢ DashkaBot –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
  };

  const cleanup = () => {
    if (recognitionRef.current) {
      recognitionRef.current.stop();
    }
    if (websocketRef.current) {
      websocketRef.current.close();
    }
  };

  // AI Server Check
  const checkAIServer = async () => {
    try {
      const response = await fetch(`${config.aiServer}/health`);
      if (response.ok) {
        setConnectionStatus(prev => ({ ...prev, ai: true }));
        console.log('‚úÖ AI Server connected');
      } else {
        throw new Error(`Server responded with ${response.status}`);
      }
    } catch (error) {
      setConnectionStatus(prev => ({ ...prev, ai: false }));
      console.error('‚ùå AI Server not available:', error);
    }
  };

  // WebSocket initialization
  const initWebSocket = () => {
    if (!config.enableWebSocket) return;

    try {
      const ws = new WebSocket(config.wsServer);
      
      ws.onopen = () => {
        setConnectionStatus(prev => ({ ...prev, ws: true }));
        console.log('WebSocket connected');
      };

      ws.onclose = () => {
        setConnectionStatus(prev => ({ ...prev, ws: false }));
        console.log('WebSocket disconnected');
      };

      ws.onmessage = (event) => {
        const data = JSON.parse(event.data);
        handleWebSocketMessage(data);
      };

      ws.onerror = (error) => {
        setConnectionStatus(prev => ({ ...prev, ws: false }));
        console.error('WebSocket error:', error);
      };

      websocketRef.current = ws;
    } catch (error) {
      setConnectionStatus(prev => ({ ...prev, ws: false }));
      console.error('WebSocket init failed:', error);
    }
  };

  // Speech Recognition
  const initSpeechRecognition = () => {
    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
      setConnectionStatus(prev => ({ ...prev, speech: false }));
      console.error('Speech recognition not supported');
      return;
    }

    const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;
    const recognition = new SpeechRecognition();

    recognition.continuous = true;
    recognition.interimResults = true;
    recognition.maxAlternatives = 1;
    recognition.lang = currentRole === 'user' ? 'ru-RU' : 'pl-PL';

    recognition.onstart = () => {
      setConnectionStatus(prev => ({ ...prev, speech: true }));
      setStatus('üé§ –ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å... –ì–æ–≤–æ—Ä–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ –≤—Ä–µ–º–µ–Ω–∏');
    };

    recognition.onresult = (event: any) => {
      let finalTranscript = '';
      let interimTranscript = '';

      for (let i = 0; i < event.results.length; i++) {
        const transcript = event.results[i][0].transcript;
        if (event.results[i].isFinal) {
          finalTranscript += transcript + ' ';
        } else {
          interimTranscript += transcript;
        }
      }

      const currentText = finalTranscript + interimTranscript;
      if (currentText.trim()) {
        setOriginalText(currentText);
        setStatus('üé§ –ó–∞–ø–∏—Å—ã–≤–∞—é... –ù–∞–∂–º–∏—Ç–µ ‚èπÔ∏è –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ');
      }
    };

    recognition.onerror = (event: any) => {
      console.error('Speech recognition error:', event.error);
      
      if (event.error === 'no-speech' || event.error === 'audio-capture') {
        setStatus('üîá –ù–µ —Å–ª—ã—à—É —Ä–µ—á—å... –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å');
        return;
      }
      
      setStatus(`‚ùå –û—à–∏–±–∫–∞: ${event.error}`);
      stopRecording();
    };

    recognition.onend = () => {
      console.log('üìö Recognition ended');
      if (isRecording) {
        try {
          recognition.start();
        } catch (err) {
          console.log('Cannot restart:', err);
          stopRecording();
        }
      }
    };

    recognitionRef.current = recognition;
    setConnectionStatus(prev => ({ ...prev, speech: true }));
  };

  // Translation function
  const performTranslation = async (text: string) => {
    setIsTranslating(true);
    setOriginalText(text);
    setStatus('üîÑ –ü–µ—Ä–µ–≤–æ–∂—É...');

    try {
      const fromLang = currentRole === 'user' ? 'RU' : 'PL';
      const toLang = currentRole === 'user' ? 'PL' : 'RU';

      const response = await fetch(`${config.aiServer}/translate`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          text: text,
          source_language: fromLang,
          target_language: toLang
        })
      });

      if (!response.ok) {
        throw new Error(`AI Server error: ${response.status}`);
      }

      const result = await response.json();
      const translation = result.translated_text || '[–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞]';

      setTranslatedText(translation);
      setStatus(`‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ! (${fromLang} ‚Üí ${toLang})`);

      // WebSocket message
      if (websocketRef.current && websocketRef.current.readyState === WebSocket.OPEN) {
        const wsMessage = {
          type: 'translation',
          role: currentRole,
          original: text,
          translation: translation,
          from: fromLang.toLowerCase(),
          to: toLang.toLowerCase(),
          timestamp: new Date().toISOString()
        };
        websocketRef.current.send(JSON.stringify(wsMessage));
      }

    } catch (error: any) {
      console.error('Translation error:', error);
      setStatus('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: ' + error.message);
      setTranslatedText('–û—à–∏–±–∫–∞: ' + error.message);
    } finally {
      setIsTranslating(false);
    }
  };

  // Recording controls
  const toggleRecording = () => {
    if (!recognitionRef.current) {
      setStatus('‚ùå –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
      return;
    }

    if (!isRecording) {
      startRecording();
    } else {
      stopRecording();
    }
  };

  const startRecording = () => {
    setIsRecording(true);
    setStatus('üé§ –°–ª—É—à–∞—é... –ù–∞–∂–º–∏—Ç–µ ‚èπÔ∏è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏');
    setOriginalText('–ì–æ–≤–æ—Ä–∏—Ç–µ —Å–µ–π—á–∞—Å... (–Ω–∞–∂–º–∏—Ç–µ ‚èπÔ∏è –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ)');
    setTranslatedText('–ü–µ—Ä–µ–≤–æ–¥ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...');

    try {
      recognitionRef.current.start();
    } catch (error: any) {
      console.error('Failed to start recording:', error);
      setStatus('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å');
      setIsRecording(false);
    }
  };

  const stopRecording = () => {
    setIsRecording(false);
    setStatus('‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∫–∞...');

    if (recognitionRef.current) {
      recognitionRef.current.stop();
    }

    setTimeout(() => {
      const recordedText = originalText;
      if (recordedText && recordedText !== '–ì–æ–≤–æ—Ä–∏—Ç–µ —Å–µ–π—á–∞—Å... (–Ω–∞–∂–º–∏—Ç–µ ‚èπÔ∏è –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ)' && recordedText.trim()) {
        setStatus('‚úÖ –ì–æ—Ç–æ–≤–æ! –ú–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏" –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∞—Ç—å –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥');
        // –ê–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          if (!isRecording && recordedText === originalText) {
            performTranslation(recordedText);
          }
        }, 3000);
      } else {
        setStatus('‚ùå –¢–µ–∫—Å—Ç –Ω–µ –∑–∞–ø–∏—Å–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑');
      }
    }, 1000);
  };

  // Text functions
  const translateText = async () => {
    const text = inputText.trim();
    if (!text) {
      setStatus('‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞');
      return;
    }
    await performTranslation(text);
  };

  const translateCurrentText = async () => {
    const textFromInput = inputText.trim();
    const textFromOriginal = originalText;

    let text = '';
    if (currentMode === 'text' && textFromInput) {
      text = textFromInput;
    } else if (textFromOriginal && textFromOriginal !== '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω...') {
      text = textFromOriginal;
    }

    if (!text) {
      setStatus('‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞');
      return;
    }

    await performTranslation(text);
  };

  const clearText = () => {
    setInputText('');
    setOriginalText('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω...');
    setTranslatedText('–ü–µ—Ä–µ–≤–æ–¥ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å...');
    setStatus('üü¢ DashkaBot –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
  };

  // Utility functions
  const pasteText = async () => {
    try {
      const text = await navigator.clipboard.readText();
      setInputText(text);
      setStatus('üìã –¢–µ–∫—Å—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞');
    } catch (error) {
      console.error('Paste failed:', error);
      setStatus('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç');
    }
  };

  const copyResult = async () => {
    if (translatedText && translatedText !== '–ü–µ—Ä–µ–≤–æ–¥ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å...') {
      try {
        await navigator.clipboard.writeText(translatedText);
        setStatus('üìÑ –ü–µ—Ä–µ–≤–æ–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
      } catch (error) {
        console.error('Copy failed:', error);
        setStatus('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç');
      }
    } else {
      setStatus('‚ùå –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è');
    }
  };

  const handleWebSocketMessage = (data: any) => {
    if (data.type === 'translation' && data.role !== currentRole) {
      setOriginalText(`[${data.role}]: ${data.original}`);
      setTranslatedText(data.translation);
      setStatus(`üì® –ü–æ–ª—É—á–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç ${data.role}`);
    }
  };

  // Role switching
  const handleRoleChange = (role: 'user' | 'steuerberater') => {
    setCurrentRole(role);
    const roleName = role === 'user' ? 'Russian Speaker üá∑üá∫' : 'Polish Speaker üáµüá±';
    setStatus('–†–æ–ª—å: ' + roleName);

    if (recognitionRef.current) {
      recognitionRef.current.lang = role === 'user' ? 'ru-RU' : 'pl-PL';
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-600 via-blue-600 to-teal-600 p-4">
      <div className="max-w-md mx-auto glass rounded-3xl p-8 shadow-2xl">
        
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-white mb-2">
            {currentLanguageConfig.app.title}
          </h1>
          <p className="text-white/80 text-sm">
            {currentLanguageConfig.app.subtitle}
          </p>
        </div>

        {/* Role Selector */}
        <div className="flex gap-3 mb-8">
          <button
            className={`language-btn flex-1 ${currentRole === 'user' ? 'active' : 'inactive'}`}
            onClick={() => handleRoleChange('user')}
          >
            üá∑üá∫ {currentLanguageConfig.languageSelector.sourceLabel}
          </button>
          <button
            className={`language-btn flex-1 ${currentRole === 'steuerberater' ? 'active' : 'inactive'}`}
            onClick={() => handleRoleChange('steuerberater')}
          >
            üáµüá± {currentLanguageConfig.languageSelector.targetLabel}
          </button>
        </div>

        {/* Mode Tabs */}
        <div className="flex mb-6 bg-black/20 rounded-xl p-1">
          <button
            className={`flex-1 py-2 px-4 rounded-lg text-sm font-medium transition-all ${
              currentMode === 'text' 
                ? 'bg-white/20 text-white' 
                : 'text-white/70 hover:text-white'
            }`}
            onClick={() => setCurrentMode('text')}
          >
            üìù –¢–µ–∫—Å—Ç
          </button>
          <button
            className={`flex-1 py-2 px-4 rounded-lg text-sm font-medium transition-all ${
              currentMode === 'voice' 
                ? 'bg-white/20 text-white' 
                : 'text-white/70 hover:text-white'
            }`}
            onClick={() => setCurrentMode('voice')}
          >
            üé§ –ì–æ–ª–æ—Å
          </button>
        </div>

        {/* Status */}
        <div className="bg-white/20 p-4 rounded-xl mb-6 text-center text-white font-medium">
          {status}
        </div>

        {/* Text Mode */}
        {currentMode === 'text' && (
          <div className="space-y-4 mb-6">
            <div className="relative">
              <textarea
                className="textarea-field w-full min-h-[80px] pr-12"
                placeholder={currentLanguageConfig.placeholders.inputText}
                value={inputText}
                onChange={(e) => setInputText(e.target.value)}
                onKeyPress={(e) => {
                  if (e.key === 'Enter' && e.ctrlKey) {
                    translateText();
                  }
                }}
              />
              
              {/* Floating buttons */}
              <div className="absolute right-2 top-2 flex flex-col gap-1">
                <button
                  className="w-7 h-7 bg-blue-500/80 hover:bg-blue-600 text-white rounded text-xs font-bold backdrop-blur-sm transition-all hover:scale-110"
                  onClick={pasteText}
                  title="–í—Å—Ç–∞–≤–∏—Ç—å"
                >
                  v
                </button>
                <button
                  className="w-7 h-7 bg-gray-500/80 hover:bg-gray-600 text-white rounded text-xs font-bold backdrop-blur-sm transition-all hover:scale-110"
                  onClick={() => setInputText('')}
                  title="–û—á–∏—Å—Ç–∏—Ç—å"
                >
                  √ó
                </button>
                <button
                  className="w-7 h-7 bg-green-500/80 hover:bg-green-600 text-white rounded text-xs font-bold backdrop-blur-sm transition-all hover:scale-110"
                  onClick={copyResult}
                  title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å"
                >
                  c
                </button>
              </div>
            </div>

            <div className="flex gap-3">
              <button
                className="btn-primary flex-1"
                onClick={translateText}
                disabled={isTranslating}
              >
                {isTranslating ? '‚è≥ –ü–µ—Ä–µ–≤–æ–¥–∏–º...' : `üîÑ ${currentLanguageConfig.buttons.translate}`}
              </button>
              <button
                className="btn-secondary"
                onClick={clearText}
              >
                üóëÔ∏è {currentLanguageConfig.buttons.clear}
              </button>
            </div>
          </div>
        )}

        {/* Voice Mode */}
        {currentMode === 'voice' && (
          <div className="space-y-6 mb-6">
            <div className="text-center">
              <button
                className={`w-32 h-32 rounded-full border-none text-4xl cursor-pointer transition-all text-white shadow-lg ${
                  isRecording 
                    ? 'bg-gradient-to-br from-red-600 to-red-700 animate-pulse' 
                    : 'bg-gradient-to-br from-red-500 to-red-600 hover:from-red-600 hover:to-red-700'
                } ${isRecording ? '' : 'hover:scale-105'} active:scale-95`}
                onClick={toggleRecording}
                disabled={!recognitionRef.current}
              >
                {isRecording ? '‚èπÔ∏è' : 'üé§'}
              </button>
              <div className="mt-4 text-white/90 text-center">
                {isRecording ? '–ì–æ–≤–æ—Ä–∏—Ç–µ... –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏' : '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–ø–∏—Å–∏'}
              </div>
            </div>

            <div className="flex gap-3">
              <button
                className="btn-primary flex-1"
                onClick={translateCurrentText}
                disabled={isTranslating}
              >
                {isTranslating ? '‚è≥ –ü–µ—Ä–µ–≤–æ–¥–∏–º...' : `üîÑ ${currentLanguageConfig.buttons.translate}`}
              </button>
              <button
                className="btn-secondary"
                onClick={clearText}
              >
                üóëÔ∏è {currentLanguageConfig.buttons.clear}
              </button>
            </div>
          </div>
        )}

        {/* Translation Results */}
        <div className="translation-result mb-6">
          <div className="text-gray-600 text-sm mb-2 font-medium">
            {currentLanguageConfig.placeholders.sourceText}
          </div>
          <div className="text-gray-800 font-medium mb-4 min-h-[24px] break-words">
            {originalText}
          </div>

          <div className="text-gray-600 text-sm mb-2 font-medium">
            {currentLanguageConfig.placeholders.outputLabel}
          </div>
          <div className="text-gray-800 font-medium min-h-[24px] break-words">
            {translatedText}
          </div>
        </div>

        {/* Device Info & Status */}
        <div className="bg-black/20 p-4 rounded-xl text-center text-white text-sm">
          <div className="font-bold mb-2">Samsung Galaxy S24</div>
          <div className="mb-3">–ü–æ–¥–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ Wi-Fi</div>
          
          <div className="flex justify-between text-xs">
            <div className="status-indicator">
              <span className={`status-dot ${connectionStatus.ai ? 'status-connected' : 'status-disconnected'}`}></span>
              AI Server
            </div>
            <div className="status-indicator">
              <span className={`status-dot ${connectionStatus.ws ? 'status-connected' : 'status-disconnected'}`}></span>
              WebSocket
            </div>
            <div className="status-indicator">
              <span className={`status-dot ${connectionStatus.speech ? 'status-connected' : 'status-disconnected'}`}></span>
              Speech API
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;